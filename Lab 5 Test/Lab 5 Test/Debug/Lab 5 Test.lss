
Lab 5 Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000214  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e09  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a01  00000000  00000000  00001151  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e2  00000000  00000000  00001b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000500  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d5  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000277d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 e1       	ldi	r30, 0x14	; 20
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  da:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <writecommand>:
#define EBIT 5 // connected to PC5
#define RSBIT 4 // connected to PC4 
//#define RWBIT 5 // connected to PB1

inline void E_HIGH() { PORTC |= 1<<EBIT; } // Function for Enable pin (PORTD = PORTD | 0b00100000;)
inline void E_LOW() { PORTC &= ~(1<<EBIT); } //PORTD = PORTD & 0b11011111
  e2:	98 b1       	in	r25, 0x08	; 8
  e4:	9f 7d       	andi	r25, 0xDF	; 223
  e6:	98 b9       	out	0x08, r25	; 8

inline void RS_HIGH() { PORTC |= 1<<RSBIT; }   //PORTD = PORTD | 0b000100000;
inline void RS_LOW() { PORTC &= ~(1<<RSBIT); } //PORTD = PORTD & 0b11101111;
  e8:	98 b1       	in	r25, 0x08	; 8
  ea:	9f 7e       	andi	r25, 0xEF	; 239
  ec:	98 b9       	out	0x08, r25	; 8

#define EBIT 5 // connected to PC5
#define RSBIT 4 // connected to PC4 
//#define RWBIT 5 // connected to PB1

inline void E_HIGH() { PORTC |= 1<<EBIT; } // Function for Enable pin (PORTD = PORTD | 0b00100000;)
  ee:	98 b1       	in	r25, 0x08	; 8
  f0:	90 62       	ori	r25, 0x20	; 32
  f2:	98 b9       	out	0x08, r25	; 8
{
	E_LOW(); // E = 0
	RS_LOW(); // RS = 0
	E_HIGH(); // E = 0
	
	PORTD = d ;//(PORTD & 0xF0) | (d>>8); //write upper nibble
  f4:	8b b9       	out	0x0b, r24	; 11
inline void RS_HIGH() { PORTC |= 1<<RSBIT; }   //PORTD = PORTD | 0b000100000;
inline void RS_LOW() { PORTC &= ~(1<<RSBIT); } //PORTD = PORTD & 0b11101111;

	inline void delay250ns() // delay function
	{
		asm volatile(
  f6:	02 95       	swap	r16
  f8:	02 95       	swap	r16
  fa:	02 95       	swap	r16
  fc:	02 95       	swap	r16
#define EBIT 5 // connected to PC5
#define RSBIT 4 // connected to PC4 
//#define RWBIT 5 // connected to PB1

inline void E_HIGH() { PORTC |= 1<<EBIT; } // Function for Enable pin (PORTD = PORTD | 0b00100000;)
inline void E_LOW() { PORTC &= ~(1<<EBIT); } //PORTD = PORTD & 0b11011111
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	8f 7d       	andi	r24, 0xDF	; 223
 102:	88 b9       	out	0x08, r24	; 8
inline void RS_HIGH() { PORTC |= 1<<RSBIT; }   //PORTD = PORTD | 0b000100000;
inline void RS_LOW() { PORTC &= ~(1<<RSBIT); } //PORTD = PORTD & 0b11101111;

	inline void delay250ns() // delay function
	{
		asm volatile(
 104:	02 95       	swap	r16
 106:	02 95       	swap	r16
 108:	02 95       	swap	r16
 10a:	02 95       	swap	r16
#define EBIT 5 // connected to PC5
#define RSBIT 4 // connected to PC4 
//#define RWBIT 5 // connected to PB1

inline void E_HIGH() { PORTC |= 1<<EBIT; } // Function for Enable pin (PORTD = PORTD | 0b00100000;)
inline void E_LOW() { PORTC &= ~(1<<EBIT); } //PORTD = PORTD & 0b11011111
 10c:	88 b1       	in	r24, 0x08	; 8
 10e:	8f 7d       	andi	r24, 0xDF	; 223
 110:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	80 ed       	ldi	r24, 0xD0	; 208
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <writecommand+0x32>
 118:	08 95       	ret

0000011a <writedata>:
 11a:	98 b1       	in	r25, 0x08	; 8
 11c:	9f 7d       	andi	r25, 0xDF	; 223
 11e:	98 b9       	out	0x08, r25	; 8

inline void RS_HIGH() { PORTC |= 1<<RSBIT; }   //PORTD = PORTD | 0b000100000;
 120:	98 b1       	in	r25, 0x08	; 8
 122:	90 61       	ori	r25, 0x10	; 16
 124:	98 b9       	out	0x08, r25	; 8

#define EBIT 5 // connected to PC5
#define RSBIT 4 // connected to PC4 
//#define RWBIT 5 // connected to PB1

inline void E_HIGH() { PORTC |= 1<<EBIT; } // Function for Enable pin (PORTD = PORTD | 0b00100000;)
 126:	98 b1       	in	r25, 0x08	; 8
 128:	90 62       	ori	r25, 0x20	; 32
 12a:	98 b9       	out	0x08, r25	; 8
{
	E_LOW(); // E = 0
	RS_HIGH(); // RS = 1
	E_HIGH(); // E = 0
	
	PORTD = d ;//(PORTD & 0xF0) | (d>>8); //write upper nibble
 12c:	8b b9       	out	0x0b, r24	; 11
inline void RS_HIGH() { PORTC |= 1<<RSBIT; }   //PORTD = PORTD | 0b000100000;
inline void RS_LOW() { PORTC &= ~(1<<RSBIT); } //PORTD = PORTD & 0b11101111;

	inline void delay250ns() // delay function
	{
		asm volatile(
 12e:	02 95       	swap	r16
 130:	02 95       	swap	r16
 132:	02 95       	swap	r16
 134:	02 95       	swap	r16
#define EBIT 5 // connected to PC5
#define RSBIT 4 // connected to PC4 
//#define RWBIT 5 // connected to PB1

inline void E_HIGH() { PORTC |= 1<<EBIT; } // Function for Enable pin (PORTD = PORTD | 0b00100000;)
inline void E_LOW() { PORTC &= ~(1<<EBIT); } //PORTD = PORTD & 0b11011111
 136:	88 b1       	in	r24, 0x08	; 8
 138:	8f 7d       	andi	r24, 0xDF	; 223
 13a:	88 b9       	out	0x08, r24	; 8
inline void RS_HIGH() { PORTC |= 1<<RSBIT; }   //PORTD = PORTD | 0b000100000;
inline void RS_LOW() { PORTC &= ~(1<<RSBIT); } //PORTD = PORTD & 0b11101111;

	inline void delay250ns() // delay function
	{
		asm volatile(
 13c:	02 95       	swap	r16
 13e:	02 95       	swap	r16
 140:	02 95       	swap	r16
 142:	02 95       	swap	r16
#define EBIT 5 // connected to PC5
#define RSBIT 4 // connected to PC4 
//#define RWBIT 5 // connected to PB1

inline void E_HIGH() { PORTC |= 1<<EBIT; } // Function for Enable pin (PORTD = PORTD | 0b00100000;)
inline void E_LOW() { PORTC &= ~(1<<EBIT); } //PORTD = PORTD & 0b11011111
 144:	88 b1       	in	r24, 0x08	; 8
 146:	8f 7d       	andi	r24, 0xDF	; 223
 148:	88 b9       	out	0x08, r24	; 8
 14a:	80 ed       	ldi	r24, 0xD0	; 208
 14c:	8a 95       	dec	r24
 14e:	f1 f7       	brne	.-4      	; 0x14c <writedata+0x32>
 150:	08 95       	ret

00000152 <printstring>:
	E_LOW();
	_delay_us(39);
}

void printstring(char s[])
{
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 15a:	c0 e0       	ldi	r28, 0x00	; 0
	while(s[i])
 15c:	03 c0       	rjmp	.+6      	; 0x164 <printstring+0x12>
	writedata(s[i++]);
 15e:	cf 5f       	subi	r28, 0xFF	; 255
 160:	0e 94 8d 00 	call	0x11a	; 0x11a <writedata>
}

void printstring(char s[])
{
	uint8_t i = 0;
	while(s[i])
 164:	f8 01       	movw	r30, r16
 166:	ec 0f       	add	r30, r28
 168:	f1 1d       	adc	r31, r1
 16a:	80 81       	ld	r24, Z
 16c:	81 11       	cpse	r24, r1
 16e:	f7 cf       	rjmp	.-18     	; 0x15e <printstring+0xc>
	writedata(s[i++]);
	
}
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <GotoXY>:

void GotoXY(uint8_t x,uint8_t y)
{
	writecommand(0x80 | ( y*0x40 + x));
 178:	90 e4       	ldi	r25, 0x40	; 64
 17a:	69 9f       	mul	r22, r25
 17c:	80 0d       	add	r24, r0
 17e:	11 24       	eor	r1, r1
 180:	80 68       	ori	r24, 0x80	; 128
 182:	0e 94 71 00 	call	0xe2	; 0xe2 <writecommand>
 186:	08 95       	ret

00000188 <main>:
	void GotoXY(uint8_t x,uint8_t y); //goto XY subroutine
	

int main(void) 
{
    DDRC |= 0x30; // rs, e
 188:	87 b1       	in	r24, 0x07	; 7
 18a:	80 63       	ori	r24, 0x30	; 48
 18c:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0xFF; //D is output
 18e:	8a b1       	in	r24, 0x0a	; 10
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	81 ee       	ldi	r24, 0xE1	; 225
 198:	94 e0       	ldi	r25, 0x04	; 4
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x12>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x1c>
 1a4:	00 00       	nop
	_delay_ms(100); // let LCD initialize
	writecommand( 0x30 ); //function set 4 bit mode
 1a6:	80 e3       	ldi	r24, 0x30	; 48
 1a8:	0e 94 71 00 	call	0xe2	; 0xe2 <writecommand>
 1ac:	8f e1       	ldi	r24, 0x1F	; 31
 1ae:	9e e4       	ldi	r25, 0x4E	; 78
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x28>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x2e>
 1b6:	00 00       	nop
	_delay_ms(5); // wait at least 4 ms
	writecommand( 0x38 ); // function set 2 lines, 5x8 font
 1b8:	88 e3       	ldi	r24, 0x38	; 56
 1ba:	0e 94 71 00 	call	0xe2	; 0xe2 <writecommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	8f e8       	ldi	r24, 0x8F	; 143
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0x3a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x40>
 1c8:	00 00       	nop
	_delay_us(100); // wait at least 100us
	writecommand( 0x08 ); // Turn off display
 1ca:	88 e0       	ldi	r24, 0x08	; 8
 1cc:	0e 94 71 00 	call	0xe2	; 0xe2 <writecommand>
	writecommand( 0x01 ); // clear display
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 71 00 	call	0xe2	; 0xe2 <writecommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	8f e3       	ldi	r24, 0x3F	; 63
 1d8:	9f e1       	ldi	r25, 0x1F	; 31
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0x52>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0x58>
 1e0:	00 00       	nop
	_delay_ms(2); // wait at least 2ms
	writecommand(0x06); // increment cursor no shifting
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	0e 94 71 00 	call	0xe2	; 0xe2 <writecommand>
	writecommand(0x0F); // turn on display
 1e8:	8f e0       	ldi	r24, 0x0F	; 15
 1ea:	0e 94 71 00 	call	0xe2	; 0xe2 <writecommand>
	
	GotoXY(2,0); //col 2 row 0
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	0e 94 bc 00 	call	0x178	; 0x178 <GotoXY>
	printstring("Nikolas!");
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 a9 00 	call	0x152	; 0x152 <printstring>
	GotoXY(5,1);
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	85 e0       	ldi	r24, 0x05	; 5
 202:	0e 94 bc 00 	call	0x178	; 0x178 <GotoXY>
	printstring("Artem!");
 206:	89 e0       	ldi	r24, 0x09	; 9
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 a9 00 	call	0x152	; 0x152 <printstring>
 20e:	ff cf       	rjmp	.-2      	; 0x20e <main+0x86>

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
